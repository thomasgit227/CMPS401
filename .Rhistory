TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
title("Body Temp vs Time")
#Newton's Law of Cooling: dT/dt = k (A - T)
# f(t,T) - k (A - T)
# T - Temperature
# t - Time
# A - Temp of Environment
# k - Constant of Proportionality
#User Parameters
h <- 1 #Step Size (hrs)
n <- 10 #Elapsed Time (hrs)
#Measured at 10:23pm T(0) = 98.6°F <- Initial Condition
k <- 0.13353
A <- 68
Temps <- vector(length = n)
Temps[1] <- 98.6
TEnd <- 80
#Euler's Method
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
legend(topright, legend = c('E', 'RK'), col = c('black', 'red'))
title("Body Temp vs Time")
#Newton's Law of Cooling: dT/dt = k (A - T)
# f(t,T) - k (A - T)
# T - Temperature
# t - Time
# A - Temp of Environment
# k - Constant of Proportionality
#User Parameters
h <- 1 #Step Size (hrs)
n <- 10 #Elapsed Time (hrs)
#Measured at 10:23pm T(0) = 98.6°F <- Initial Condition
k <- 0.13353
A <- 68
Temps <- vector(length = n)
Temps[1] <- 98.6
TEnd <- 80
#Euler's Method
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
legend(topright, inset, legend = c('E', 'RK'), col = c('black', 'red'))
title("Body Temp vs Time")
#Newton's Law of Cooling: dT/dt = k (A - T)
# f(t,T) - k (A - T)
# T - Temperature
# t - Time
# A - Temp of Environment
# k - Constant of Proportionality
#User Parameters
h <- 1 #Step Size (hrs)
n <- 10 #Elapsed Time (hrs)
#Measured at 10:23pm T(0) = 98.6°F <- Initial Condition
k <- 0.13353
A <- 68
Temps <- vector(length = n)
Temps[1] <- 98.6
TEnd <- 80
#Euler's Method
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
legend("topright", legend = c('E', 'RK'), col = c('black', 'red'))
title("Body Temp vs Time")
#Newton's Law of Cooling: dT/dt = k (A - T)
# f(t,T) - k (A - T)
# T - Temperature
# t - Time
# A - Temp of Environment
# k - Constant of Proportionality
#User Parameters
h <- 1 #Step Size (hrs)
n <- 10 #Elapsed Time (hrs)
#Measured at 10:23pm T(0) = 98.6°F <- Initial Condition
k <- 0.13353
A <- 68
Temps <- vector(length = n)
Temps[1] <- 98.6
TEnd <- 80
#Euler's Method
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
legend("topright", legend = c('E', 'RK'), col = c('black', 'red'), lty=1:2)
title("Body Temp vs Time")
#Newton's Law of Cooling: dT/dt = k (A - T)
# f(t,T) - k (A - T)
# T - Temperature
# t - Time
# A - Temp of Environment
# k - Constant of Proportionality
#User Parameters
h <- 1 #Step Size (hrs)
n <- 10 #Elapsed Time (hrs)
#Measured at 10:23pm T(0) = 98.6°F <- Initial Condition
k <- 0.13353
A <- 68
Temps <- vector(length = n)
Temps[1] <- 98.6
TEnd <- 80
#Euler's Method
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
legend("topright", legend = c('E', 'RK'), col = c('black', 'red'), lty=2:2)
title("Body Temp vs Time")
#Newton's Law of Cooling: dT/dt = k (A - T)
# f(t,T) - k (A - T)
# T - Temperature
# t - Time
# A - Temp of Environment
# k - Constant of Proportionality
#User Parameters
h <- 1 #Step Size (hrs)
n <- 10 #Elapsed Time (hrs)
#Measured at 10:23pm T(0) = 98.6°F <- Initial Condition
k <- 0.13353
A <- 68
Temps <- vector(length = n)
Temps[1] <- 98.6
TEnd <- 80
#Euler's Method
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
legend("topright", legend = c('Eulers', 'Runge-Kutta'), col = c('black', 'red'), lty=2:2)
title("Body Temp vs Time")
library(reticulate)
install.packages(reticulate)
library(reticulate)
library(reticulate)
py_run_file("script.py")
py_run_string("x = 10")
# access the python main module via the 'py' object
py$x
library(reticulate)
py_run_file("script.py")
py_run_string("x = 10")
# access the python main module via the 'py' object
py$x
library(reticulate)
py_run_file("script.py")
# access the python main module via the 'py' object
py$x
py_run_file("script.py")
# access the python main module via the 'py' object
py$x
3
4
library(reticulate)
py_run_file("script.py")
# access the python main module via the 'py' object
py$x
py_run_file("script.py")
reticulate::repl_python()
def sum(a, b):
return (a + b)
a = int(input('Enter 1st number: '))
b = int(input('Enter 2nd number: '))
print(f'Sum of {a} and {b} is {sum(a, b)}')
quit
py_run_file("script.py")
use_python("script.py")
3
2
1
library(reticulate)
use_python("script.py")
setwd("C:/workspace/CMPS401")
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn","pillow"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from pillow import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn","Pillow"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from Pillow import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
py_run_string('pip uninstall conda')
py_run_string('uninstall conda')
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn","Pillow"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from Pillow import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from Pillow import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from Pillow import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from skimage import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from matplotlib.pyplot import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn","matplotlib"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from matplotlib.pyplot import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn","matplotlib"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from matplotlib.pyplot import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
library(reticulate)
library(readxl)
#Import and Install Libraries via Python
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn","matplotlib"))
py_run_string('from posixpath import dirname')
py_run_string('import csv, os.path, re')
py_run_string('from matplotlib import imread')
py_run_string('from keras.applications.mobilenet_v2 import MobileNetV2')
py_run_string('from keras.applications.mobilenet_v2 import preprocess_input')
py_run_string('from keras.applications.mobilenet_v2 import decode_predictions')
py_run_string('from keras.layers import Dense')
py_run_string('from keras import Model')
#Run Python Script for Image Recognition
source_python("Script.py")
#Grab .xlsx Data
#data <- read_excel("")
#hamsterProb <- unlist(data[1])
#SandwichProb <- unlist(data[2])
