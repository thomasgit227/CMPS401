}
points(Temps, pch = 19, col = 'red')
legend("topright", legend = c('E', 'RK'), col = c('black', 'red'), lty=2:2)
title("Body Temp vs Time")
#Newton's Law of Cooling: dT/dt = k (A - T)
# f(t,T) - k (A - T)
# T - Temperature
# t - Time
# A - Temp of Environment
# k - Constant of Proportionality
#User Parameters
h <- 1 #Step Size (hrs)
n <- 10 #Elapsed Time (hrs)
#Measured at 10:23pm T(0) = 98.6°F <- Initial Condition
k <- 0.13353
A <- 68
Temps <- vector(length = n)
Temps[1] <- 98.6
TEnd <- 80
#Euler's Method
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
TNext = TCurr + h * (k * (A - TCurr))
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
plot(Temps, pch = 19, xlab = "Time Elapsed (hrs)", ylab = "Body Temp (°F)")
#Runge Kutta Method (4th Order)
TCurr <- Temps[1]
Count <- 0
while(Count < n) {
k1 <- (k * (A - TCurr))
k2 <- (k * (A - (TCurr + k1 * (0.5 * h))))
k3 <- (k * (A - (TCurr + k2 * (0.5 * h))))
k4 <- (k * (A - ((TCurr + k3 * h))))
TNext <- TCurr + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
TCurr <- TNext
Count <- Count + 1
Temps[Count] = TCurr
}
points(Temps, pch = 19, col = 'red')
legend("topright", legend = c('Eulers', 'Runge-Kutta'), col = c('black', 'red'), lty=2:2)
title("Body Temp vs Time")
library(reticulate)
install.packages(reticulate)
library(reticulate)
library(reticulate)
py_run_file("script.py")
py_run_string("x = 10")
# access the python main module via the 'py' object
py$x
library(reticulate)
py_run_file("script.py")
py_run_string("x = 10")
# access the python main module via the 'py' object
py$x
library(reticulate)
py_run_file("script.py")
# access the python main module via the 'py' object
py$x
py_run_file("script.py")
# access the python main module via the 'py' object
py$x
3
4
library(reticulate)
py_run_file("script.py")
# access the python main module via the 'py' object
py$x
py_run_file("script.py")
reticulate::repl_python()
def sum(a, b):
return (a + b)
a = int(input('Enter 1st number: '))
b = int(input('Enter 2nd number: '))
print(f'Sum of {a} and {b} is {sum(a, b)}')
quit
py_run_file("script.py")
use_python("script.py")
3
2
1
library(reticulate)
use_python("script.py")
setwd("C:/workspace/CMPS401")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow", "keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow", "keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import PIL')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow", "keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import pil')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow", "keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow", "keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","Pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import PIL')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('from PIL import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('pip install pillow')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('from PIL import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('from pillow import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","Image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","Image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","Image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","Image"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import Image')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import pillow as PIL')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import pillow as PIL')
source_python("RunRTest.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import pillow as PIL')
source_python("Script")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","pillow"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import pillow as PIL')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import pillow as PIL')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import PIL')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import Pillow')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","conda"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
py_run_string('conda update --all')
py_run_string('conda install pillow')
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","conda"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('conda install pillow')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","conda","seaborn","xlrd","xlwt"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","conda","seaborn","xlrd","xlwt"))
conda_create("my_project_env")
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras",))
conda_create("my_project_env")
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras",))
conda_create("my_project_env")
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
import numpy as np
def main():
model = VGG16( weights = 'imagenet' )
print( model.summary() )
img_path = 'h1.jpg'
# load the image with color data and as a specific size then display it
img = image.load_img(img_path, color_mode = 'rgb', target_size = (224, 224) )
# maybe do a thing to print the current image????
# Convert the image to a 3D numpy array, 1 dimension for width, 1 for height, 1 for color
x = image.img_to_array(img)
x.shape
# Add a fourth dimension to the array to account for the number of images
x = np.expand_dims(x, axis = 0 )
x = preprocess_input(x)
features = model.predict(x)
results = decode_predictions(features)
print(results)
#This Makes it do the Thing - Thomas from the past
if __name__ == "__main__":
main();
reticulate::repl_python()
quit
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras",))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras",))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import matplotlib.pyplot as plt')
py_run_string('import seaborn as sns')
source_python("Script.py")
library(reticulate)
# # import libraries to handle images + numpy for the math
# #Get the VGG16 pretrained image classifier model with the imagenet weights
py_install(packages = c("numpy","pandas","tensorflow","keras","seaborn", "seaborn"))
py_run_string('from keras.applications.vgg16 import VGG16')
py_run_string('from tensorflow.keras.preprocessing import image')
py_run_string('from tensorflow.keras.applications.vgg16 import preprocess_input,decode_predictions')
py_run_string('import pandas')
py_run_string('import matplotlib.pyplot as plt')
py_run_string('import seaborn as sns')
source_python("Script.py")
